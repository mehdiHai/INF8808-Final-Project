{"version":3,"sources":["scripts/viz3.js"],"names":["updateGroupXScale","scale","data","width","domain","map","d","Act","range","updateYScale","height","maxLine","forEach","act","Players","player","Math","max","Count","createGroups","x","d3","select","selectAll","join","attr","drawBars","y","xSubgroup","players","color","tip","actData","playerData","enter","append","Player","on","show","hide"],"mappings":";AA4EA,aApEO,SAASA,EAAmBC,EAAOC,EAAMC,GAE9CF,EAAMG,OAAOF,EAAKG,IAAI,SAAAC,GAAC,OAAIA,EAAEC,OAAMC,MAAM,CAAC,EAAGL,IAUxC,SAASM,EAAcR,EAAOC,EAAMQ,GAEzC,IAAIC,EAAU,EACdT,EAAKU,QAAS,SAACC,GAAG,OAAKA,EAAIC,QAAQF,QAAS,SAACG,GAAM,OAAKJ,EAAUK,KAAKC,IAAIF,EAAOG,MAAOP,OAEzFV,EAAMG,OAAO,CAAC,EAAGO,IAAUH,MAAM,CAACE,EAAQ,IAUrC,SAASS,EAAcjB,EAAMkB,GAElCC,GAAGC,OAAO,YACPC,UAAU,UACVrB,KAAKA,GACLsB,KAAK,KACLC,KAAK,QAAS,SACdA,KAAK,YAAa,SAAAvB,GAAI,MAAI,aAAekB,EAAElB,EAAKK,KAAO,MAarD,SAASmB,EAAUC,EAAGC,EAAWC,EAASnB,EAAQoB,EAAOC,GAE9DV,GAAGC,OAAO,YACPC,UAAU,UACVA,UAAU,QACVrB,KAAK,SAAC8B,GAKL,OAJUA,EAAQlB,QAAQT,IAAI,SAAC4B,GAE7B,OADAA,EAAW1B,IAAMyB,EAAQzB,IAClB0B,MAIVC,QACAC,OAAO,QACPV,KAAK,IAAK,SAACQ,GAAU,OAAKL,EAAUK,EAAWG,UAC/CX,KAAK,IAAK,SAACQ,GAAU,OAAKN,EAAEM,EAAWf,SACvCO,KAAK,QAASG,EAAUC,EAAQ,IAAMD,EAAUC,EAAQ,KACxDJ,KAAK,SAAU,SAACQ,GAAU,OAAKvB,EAASiB,EAAEM,EAAWf,SACrDO,KAAK,OAAQ,SAACQ,GAAU,OAAKH,EAAMG,EAAWG,UAC9CC,GAAG,YAAaN,EAAIO,MACpBD,GAAG,WAAYN,EAAIQ,MACxB,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAAA,QAAA,SAAA,EAAA,QAAA,kBAAA,EAAA,QAAA,aAAA","file":"viz3.459338ef.js","sourceRoot":"..\\src","sourcesContent":["\n/**\n * Sets the domain and range of the X scale.\n *\n * @param {*} scale The x scale\n * @param {object[]} data The data to be used\n * @param {number} width The width of the graph\n */\nexport function updateGroupXScale (scale, data, width) {\n  \n  scale.domain(data.map(d => d.Act)).range([0, width])\n}\n\n/**\n * Sets the domain and range of the Y scale.\n *\n * @param {*} scale The Y scale\n * @param {object[]} data The data to be used\n * @param {number} height The height of the graph\n */\nexport function updateYScale (scale, data, height) {\n  \n  var maxLine = 0\n  data.forEach( (act) => act.Players.forEach( (player) => maxLine = Math.max(player.Count, maxLine)))\n\n  scale.domain([0, maxLine]).range([height, 0])\n}\n\n/**\n * Creates the groups for the grouped bar chart and appends them to the graph.\n * Each group corresponds to an act.\n *\n * @param {object[]} data The data to be used\n * @param {*} x The graph's x scale\n */\nexport function createGroups (data, x) {\n  \n  d3.select('#graph-g')\n    .selectAll('.group')\n    .data(data)\n    .join('g')\n    .attr('class', 'group')\n    .attr('transform', data => 'translate(' + x(data.Act) + ')')\n}\n\n/**\n * Draws the bars inside the groups\n *\n * @param {*} y The graph's y scale\n * @param {*} xSubgroup The x scale to use to position the rectangles in the groups\n * @param {string[]} players The names of the players, each corresponding to a bar in each group\n * @param {number} height The height of the graph\n * @param {*} color The color scale for the bars\n * @param {*} tip The tooltip to show when each bar is hovered and hide when it's not\n */\nexport function drawBars (y, xSubgroup, players, height, color, tip) {\n\n  d3.select('#graph-g')\n    .selectAll('.group')\n    .selectAll('rect')\n    .data((actData) => {\n      var val = actData.Players.map((playerData) => {\n        playerData.Act = actData.Act\n        return playerData\n      })\n      return val\n    })\n    .enter()\n    .append('rect')\n    .attr('x', (playerData) => xSubgroup(playerData.Player))\n    .attr('y', (playerData) => y(playerData.Count))\n    .attr('width', xSubgroup(players[1]) - xSubgroup(players[0]))\n    .attr('height', (playerData) => height - y(playerData.Count))\n    .attr('fill', (playerData) => color(playerData.Player))\n    .on('mouseover', tip.show)\n    .on('mouseout', tip.hide)\n}\n"]}