{"version":3,"sources":["scripts/alluvial.js"],"names":["dataset","Airline","Duration","Departuretime","Type","Count","width","height","svg","d3","select","attr","sankey","nodeSort","nodeWidth","nodePadding","size","graph","nodes","links","forEach","d","sourceIndex","findIndex","node","name","targetIndex","sourceNode","targetNode","push","source","target","value","append","selectAll","data","enter","x0","y0","y1","x1","text","link","join","sankeyLinkHorizontal","Math","max","format"],"mappings":"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","file":"alluvial.ceaccd3c.js","sourceRoot":"..\\src","sourcesContent":["const dataset = [\r\n  {\r\n    Airline: \"Airline A\",\r\n    Duration: \"short\",\r\n    Departuretime: \"morning\",\r\n    Type: \"regional\",\r\n    Count: 1500,\r\n  },\r\n  {\r\n    Airline: \"Airline B\",\r\n    Duration: \"long\",\r\n    Departuretime: \"afternoon\",\r\n    Type: \"national\",\r\n    Count: 3000,\r\n  },\r\n  {\r\n    Airline: \"Airline C\",\r\n    Duration: \"medium\",\r\n    Departuretime: \"evening\",\r\n    Type: \"international\",\r\n    Count: 4500,\r\n  },\r\n];\r\n\r\nconst width = 960;\r\nconst height = 500;\r\n\r\nconst svg = d3.select(\"svg\").attr(\"width\", width).attr(\"height\", height);\r\n\r\nconst sankey = d3\r\n  .sankey()\r\n  .nodeSort(null)\r\n  .nodeWidth(15)\r\n  .nodePadding(10)\r\n  .size([width, height]);\r\n\r\nconst graph = {\r\n  nodes: [],\r\n  links: [],\r\n};\r\n\r\ndataset.forEach((d) => {\r\n  const sourceIndex = graph.nodes.findIndex(\r\n    (node) => node.name === d.Airline\r\n  );\r\n  const targetIndex = graph.nodes.findIndex(\r\n    (node) => node.name === d.Duration\r\n  );\r\n\r\n  const sourceNode = { name: d.Airline };\r\n  const targetNode = { name: d.Duration };\r\n\r\n  if (sourceIndex === -1) graph.nodes.push(sourceNode);\r\n  if (targetIndex === -1) graph.nodes.push(targetNode);\r\n\r\n  graph.links.push({\r\n    source: sourceIndex === -1 ? sourceNode : graph.nodes[sourceIndex],\r\n    target: targetIndex === -1 ? targetNode : graph.nodes[targetIndex],\r\n    value: d.Count,\r\n  });\r\n});\r\n\r\nsankey(graph);\r\n\r\nconst node = svg\r\n  .append(\"g\")\r\n  .selectAll(\".node\")\r\n  .data(graph.nodes)\r\n  .enter()\r\n  .append(\"g\")\r\n  .attr(\"class\", \"node\")\r\n  .attr(\"transform\", (d) => `translate(${d.x0},${d.y0})`);\r\n\r\nnode\r\n  .append(\"rect\")\r\n  .attr(\"height\", (d) => d.y1 - d.y0)\r\n  .attr(\"width\", (d) => d.x1 - d.x0)\r\n  .attr(\"fill\", \"gray\");\r\n\r\nnode\r\n  .append(\"text\")\r\n  .attr(\"x\", (d) => (d.x0 < width / 2 ? 6 : -6))\r\n  .attr(\"y\", (d) => (d.y1 - d.y0) / 2)\r\n  .attr(\"dy\", \"0.35em\")\r\n  .attr(\"text-anchor\", (d) => (d.x0 < width / 2 ? \"start\" : \"end\"))\r\n  .text((d) => d.name);\r\n\r\n  const link = svg\r\n  .append(\"g\")\r\n  .attr(\"fill\", \"none\")\r\n  .attr(\"stroke-opacity\", 0.5)\r\n  .selectAll(\"g\")\r\n  .data(graph.links)\r\n  .join(\"g\")\r\n  .attr(\"stroke\", \"gray\");\r\n\r\nlink\r\n  .append(\"path\")\r\n  .attr(\"d\", d3.sankeyLinkHorizontal())\r\n  .attr(\"stroke-width\", (d) => Math.max(1, d.width));\r\n\r\nlink\r\n  .append(\"title\")\r\n  .text(\r\n    (d) =>\r\n      `${d.source.name} â†’ ${d.target.name}\\n${d3.format(\",.0f\")(d.value)}`\r\n  );\r\n\r\n"]}